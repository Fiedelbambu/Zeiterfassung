// <auto-generated />
using System;
using IST.Zeiterfassung.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace IST.Zeiterfassung.Persistence.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250502181110_UpdateErrorTypesToList")]
    partial class UpdateErrorTypesToList
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.4");

            modelBuilder.Entity("IST.Zeiterfassung.Domain.Entities.Absence", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ErstelltAm")
                        .HasColumnType("TEXT");

                    b.Property<string>("Kommentar")
                        .HasColumnType("TEXT");

                    b.Property<string>("Reason")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Typ")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("UserId1")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("UserId1");

                    b.ToTable("Absences");
                });

            modelBuilder.Entity("IST.Zeiterfassung.Domain.Entities.Feiertag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Datum")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IstArbeitsfrei")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Kommentar")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("RegionCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Feiertage");
                });

            modelBuilder.Entity("IST.Zeiterfassung.Domain.Entities.LoginAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("Erfolgreich")
                        .HasColumnType("INTEGER");

                    b.Property<string>("IPAdresse")
                        .HasColumnType("TEXT");

                    b.Property<int>("LoginMethod")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Ort")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Zeitpunkt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("LoginAudits");
                });

            modelBuilder.Entity("IST.Zeiterfassung.Domain.Entities.SystemSettings", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("AutoSendReports")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("AutoSyncHolidays")
                        .HasColumnType("INTEGER");

                    b.Property<string>("BackgroundImageUrl")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<bool>("DownloadOnly")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("EnableReminder")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ErrorTypesToCheck")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<int>("FontSize")
                        .HasColumnType("INTEGER");

                    b.Property<string>("HolidayRegionCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("HolidaySource")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<bool>("QrTokenSingleUse")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RemindAfterDays")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ReportWithSignatureField")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SendOnDay")
                        .HasColumnType("INTEGER");

                    b.Property<TimeSpan>("TokenMaxLifetime")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("SystemSettings");

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111111"),
                            AutoSendReports = false,
                            AutoSyncHolidays = true,
                            DownloadOnly = false,
                            EnableReminder = false,
                            ErrorTypesToCheck = "NurKommen,KeinePauseEnde",
                            FontSize = 1,
                            HolidayRegionCode = "DE-BY",
                            HolidaySource = "API",
                            Language = "de",
                            QrTokenSingleUse = true,
                            RemindAfterDays = 3,
                            ReportWithSignatureField = false,
                            SendOnDay = 1,
                            TokenMaxLifetime = new TimeSpan(1, 0, 0, 0, 0)
                        });
                });

            modelBuilder.Entity("IST.Zeiterfassung.Domain.Entities.TimeEntry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Beschreibung")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Ende")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ErfasstAm")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ErfasstFürUserId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ErfasstVonUserId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IstMontage")
                        .HasColumnType("INTEGER");

                    b.Property<TimeSpan>("Pausenzeit")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProjektName")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Start")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ZeitmodellUserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ErfasstFürUserId");

                    b.HasIndex("ErfasstVonUserId");

                    b.HasIndex("UserId");

                    b.HasIndex("ZeitmodellUserId");

                    b.ToTable("TimeEntries");
                });

            modelBuilder.Entity("IST.Zeiterfassung.Domain.Entities.TokenConfig", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("LoginType")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("SystemSettingsId")
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan>("ValidityDuration")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("SystemSettingsId");

                    b.ToTable("TokenConfigs");

                    b.HasData(
                        new
                        {
                            Id = new Guid("22222222-1111-1111-1111-111111111111"),
                            LoginType = 1,
                            SystemSettingsId = new Guid("11111111-1111-1111-1111-111111111111"),
                            ValidityDuration = new TimeSpan(0, 1, 0, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222222"),
                            LoginType = 4,
                            SystemSettingsId = new Guid("11111111-1111-1111-1111-111111111111"),
                            ValidityDuration = new TimeSpan(0, 0, 10, 0, 0)
                        });
                });

            modelBuilder.Entity("IST.Zeiterfassung.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Abteilung")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Aktiv")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("EmployeeNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ErstelltAm")
                        .HasColumnType("TEXT");

                    b.Property<string>("FeiertagsRegion")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LetzteErfassung")
                        .HasColumnType("TEXT");

                    b.Property<string>("LetzterLoginOrt")
                        .HasColumnType("TEXT");

                    b.Property<int>("LoginMethode")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("NfcId")
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("QrToken")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("QrTokenExpiresAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("Role")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Standort")
                        .HasColumnType("TEXT");

                    b.Property<string>("Telefon")
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ZeitmodellId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ZeitmodellId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("IST.Zeiterfassung.Domain.Entities.Zeitmodell", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Bezeichnung")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan?>("GleitzeitMonatslimit")
                        .HasColumnType("TEXT");

                    b.Property<bool>("GleitzeitkontoAktiv")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IstGleitzeit")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("SaldoÜbertragAktiv")
                        .HasColumnType("INTEGER");

                    b.Property<TimeSpan>("WochenSollzeit")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Zeitmodelle");
                });

            modelBuilder.Entity("IST.Zeiterfassung.Domain.Entities.Absence", b =>
                {
                    b.HasOne("IST.Zeiterfassung.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IST.Zeiterfassung.Domain.Entities.User", null)
                        .WithMany("Absences")
                        .HasForeignKey("UserId1");

                    b.Navigation("User");
                });

            modelBuilder.Entity("IST.Zeiterfassung.Domain.Entities.LoginAudit", b =>
                {
                    b.HasOne("IST.Zeiterfassung.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("IST.Zeiterfassung.Domain.Entities.TimeEntry", b =>
                {
                    b.HasOne("IST.Zeiterfassung.Domain.Entities.User", "Betroffener")
                        .WithMany()
                        .HasForeignKey("ErfasstFürUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IST.Zeiterfassung.Domain.Entities.User", "Erfasser")
                        .WithMany()
                        .HasForeignKey("ErfasstVonUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IST.Zeiterfassung.Domain.Entities.User", null)
                        .WithMany("TimeEntries")
                        .HasForeignKey("UserId");

                    b.HasOne("IST.Zeiterfassung.Domain.Entities.User", "ZeitmodellUser")
                        .WithMany()
                        .HasForeignKey("ZeitmodellUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Betroffener");

                    b.Navigation("Erfasser");

                    b.Navigation("ZeitmodellUser");
                });

            modelBuilder.Entity("IST.Zeiterfassung.Domain.Entities.TokenConfig", b =>
                {
                    b.HasOne("IST.Zeiterfassung.Domain.Entities.SystemSettings", null)
                        .WithMany("TokenConfigs")
                        .HasForeignKey("SystemSettingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IST.Zeiterfassung.Domain.Entities.User", b =>
                {
                    b.HasOne("IST.Zeiterfassung.Domain.Entities.Zeitmodell", "Zeitmodell")
                        .WithMany()
                        .HasForeignKey("ZeitmodellId");

                    b.Navigation("Zeitmodell");
                });

            modelBuilder.Entity("IST.Zeiterfassung.Domain.Entities.SystemSettings", b =>
                {
                    b.Navigation("TokenConfigs");
                });

            modelBuilder.Entity("IST.Zeiterfassung.Domain.Entities.User", b =>
                {
                    b.Navigation("Absences");

                    b.Navigation("TimeEntries");
                });
#pragma warning restore 612, 618
        }
    }
}
